#define DEB c

*proc isendCore
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine $1_isendCore (val, idim, i,jcore,tag,ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
        use constants
        implicit none
        integer(i4) tag, i, idim, i1, jcore, req,ivar
        $2 val(*)

*        print *,'isend ',i,' icore =',icore,' to =',jcore

        i1 = pf(i)*idim+1
        call mpi_isend (val(i1),sc(i)*idim, mpi_$1, jcore, tag
     &               , mpi_comm_world, req, mpi_erro)
DEB      print '(10(a,i3))','S: icore=',icore,' jcore=',jcore
DEB     & ,' i=',i,' ivar=',ivar,' req=',req
        request(ivar,i,jcore) = req
        return
        end

*proc irecvCore
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine $1_irecvCore (val, idim, i,jcore, tag,ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) tag, i, idim, i1, jcore, req,ivar
        $2 val(*)

*        print *,'isend ',i,' icore =',icore,' to =',jcore

        i1 = pf(i)*idim+1
        call mpi_irecv (val(i1),sc(i)*idim, mpi_$1, jcore, tag
     &               , mpi_comm_world, req, mpi_erro)
DEB      print '(10(a,i3))','R: icore=',icore,' jcore=',jcore
DEB     & ,' i=',i,' ivar=',ivar,' req=',req
        request(ivar,i,jcore) = req

        return
        end

*proc igetL
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine $1_igetL (val, idim, tag,ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) tag, idim,ivar
        $2 val(*)
c left
        if (RIGHT) call $1_isendCore(val, idim, 3,icore+1, tag,ivar)
        if (LEFT)  call $1_irecvCore(val, idim, 1,icore-1, tag,ivar)
 
        return
        end

*proc igetR
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine $1_igetR (val, idim, tag,ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) tag, idim,ivar
        $2 val(*)

c right
        if (LEFT)  call $1_isendCore(val, idim, 2,icore-1, tag,ivar)
        if (RIGHT) call $1_irecvCore(val, idim, 4,icore+1, tag,ivar)
 
        return
        end

*proc igetLR
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine $1_igetLR (val, idim, tag,ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) tag, idim,ivar
        $2 val(*)

        call $1_igetL (val, idim, tag,ivar)
        call $1_igetR (val, idim, tag,ivar)

        return
        end
*end

c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine wCore (i,jcore,ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) i, jcore, req,ivar

        req = request(ivar,i,jcore) 
DEB      print '(10(a,i3))','W: icore=',icore,' jcore=',jcore
DEB     & ,' i=',i,' ivar=',ivar,' req=',req
        call mpi_wait (req,mpi_stato,mpi_erro)
        return
        end

c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine wgetL (ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) ivar
c left
        if (RIGHT) call wCore( 3,icore+1,ivar)
        if (LEFT)  call wCore( 1,icore-1,ivar)
 
        return
        end


c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine wgetR (ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) ivar

c right
        if (LEFT)  call wCore( 2,icore-1,ivar)
        if (RIGHT) call wCore( 4,icore+1,ivar)
 
        return
        end

c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine wgetLR (ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) ivar

        call wgetL (ivar)
        call wgetR (ivar)

        return
        end

*proc iputR
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine $1_iputR (val, idim, tag,ifun,ivar)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) tag, idim, siz, i1, i2, i, j, k, ifun, ivar
        $2 val(*)

*        print *,'$1_putR icore =',icore

        if (RIGHT) call wCore( 4,icore+1,ivar)

        if (LEFT) then
        i = 2
        i1 = pf(i)*idim 
        siz = sc(i)*idim
        i2 = i1 + siz
        i1 = i1 + 1
        call mpi_recv ($3 ,siz, mpi_$1, icore-1, tag
     &               , mpi_comm_world, mpi_stato, mpi_erro)
            if (ifun.eq.Fmov) then
            val(i1:i2) = $3(1:siz)

#ifdef FLOAT then
            else if (ifun.eq.Fsum) then
            val(i1:i2) = val(i1:i2) + $3(1:siz)

            else if (ifun.eq.Fdif) then
            val(i1:i2) = val(i1:i2) - $3(1:siz)

            else if (ifun.eq.Fmin) then
            k = i1 
              do j = 1,siz
              val(k) = min(val(k),$3(j))
              k = k + 1 
              enddo

            else if (ifun.eq.Fmax) then
            k = i1 
              do j = 1,siz
              val(k) = max(val(k),$3(j))
              k = k + 1 
              enddo
#else ifdef LOGICAL then
            else if (ifun.eq.For) then
            k = i1 
              do j = 1,siz
              val(k) = val(k) .or. $3(j)
              k = k + 1 
              enddo

            else if (ifun.eq.Fand) then
            k = i1 
              do j = 1,siz
              val(k) = val(k) .and. $3(j)
              k = k + 1 
              enddo
#endif
            else
            write (iout,*) 'ifun=',ifun
            call logout(2,'Error in $1_putR')
            endif
        endif 

*        call mpi_barrier (mpi_comm_world, mpi_erro)       

        return
        end

*proc putR
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        subroutine $1_putR (val, idim, tag,ifun)
c:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        use parallel_data
       use constants
        implicit none
        integer(i4) tag, idim, siz, i1, i2, i, j, k, ifun
        $2 val(*)

*        print *,'$1_putR icore =',icore

        if (RIGHT) then
        i = 4
        i1 = pf(i)*idim + 1
        siz = sc(i)*idim
        call mpi_send (val(i1),siz, mpi_$1, icore+1, tag
     &               , mpi_comm_world, mpi_erro)
         endif        

        if (LEFT) then
        i = 2
        i1 = pf(i)*idim 
        siz = sc(i)*idim
        i2 = i1 + siz
        i1 = i1 + 1
        call mpi_recv ($3 ,siz, mpi_$1, icore-1, tag
     &               , mpi_comm_world, mpi_stato, mpi_erro)
            if (ifun.eq.Fmov) then
            val(i1:i2) = $3(1:siz)

#ifdef FLOAT then
            else if (ifun.eq.Fsum) then
            val(i1:i2) = val(i1:i2) + $3(1:siz)

            else if (ifun.eq.Fdif) then
            val(i1:i2) = val(i1:i2) - $3(1:siz)

            else if (ifun.eq.Fmin) then
            k = i1 
              do j = 1,siz
              val(k) = min(val(k),$3(j))
              k = k + 1 
              enddo

            else if (ifun.eq.Fmax) then
            k = i1 
              do j = 1,siz
              val(k) = max(val(k),$3(j))
              k = k + 1 
              enddo
#else ifdef LOGICAL then
            else if (ifun.eq.For) then
            k = i1 
              do j = 1,siz
              val(k) = val(k) .or. $3(j)
              k = k + 1 
              enddo

            else if (ifun.eq.Fand) then
            k = i1 
              do j = 1,siz
              val(k) = val(k) .and. $3(j)
              k = k + 1 
              enddo
#endif
            else
            write (iout,*) 'ifun=',ifun
            call logout(2,'Error in $1_putR')
            endif
        endif 

*        call mpi_barrier (mpi_comm_world, mpi_erro)       

        return
        end
*end

$exec isendCore logical1 logical*1 
$exec isendCore real4 real(r4) 
$exec isendCore real8 real(r8)
$exec isendCore complex8 complex(r8) 

$exec irecvCore logical1 logical*1 
$exec irecvCore real4 real(r4) 
$exec irecvCore real8 real(r8) 
$exec irecvCore complex8 complex(r8) 

$exec igetL logical1 logical*1 
$exec igetL real4 real(r4) 
$exec igetL real8 real(r8) 
$exec igetL complex8 real(r8) 

$exec igetR logical1 logical*1 
$exec igetR real4 real(r4) 
$exec igetR real8 real(r8) 
$exec igetR complex8 complex(r8)


$exec igetLR logical1 logical*1 
$exec igetLR real4 real(r4) 
$exec igetLR real8 real(r8)
$exec igetLR complex8 real(r8) 

#define FLOAT

$exec iputR integer1 integer*1 my_ival1
$exec iputR real4 real(r4) my_sval
$exec iputR real8 real(r8) my_dval

#undef FLOAT
#define LOGICAL
$exec iputR logical1 logical*1 my_lval1

